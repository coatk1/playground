name: my_workflow

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch.
on:

  push:
    branches:
      - master
    #tags:
    #  - '*'

  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:

  # Continuous Integration
  # This workflow contains a single job called "build" and "upload".
  build:
    name: Build and Test

    # The type of runner that the job will run on.
    #runs-on: windows-latest
    runs-on: ${{ matrix.os }}

    # Configure across different platforms.
    strategy:
      matrix:

        # Windows and Linux
        os: [windows-latest]
        # ubuntu-latest

        # Python versions
        python-version: [3.5, 3.6, 3.7]
        # 2.7

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Using actions/checkout get code from repo.
    # Referencing actions/checkout repo. If in private repo, must reference action in private repo.
    # Syntax {owner}/{repo}@{ref}
    - name: GitHub Checks
      uses: actions/checkout@v2

    # Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # Check cache
    # - name: Cache pip

      # For Windows
      # uses: actions/cache@v1
      # if: startsWith(runner.os, 'Windows')
      # with:
        # path: ~\AppData\Local\pip\Cache # This path is specific to Windows.
        # Look to see if there is a cache hit for the corresponding requirements file.
        # key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        # restore-keys: |
          # ${{ runner.os }}-pip-

    # Install dependencies.
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt

    # Check if PEP8 compliant with flake8.
    - name: Check PEP8 compliance
      run: |
        pip install flake8
        flake8 --filename=*.py --ignore=E501,F401 --statistics oboyo/

    # Check if PEP257 compliant with pydocstyle.
    # - name: Check PEP257 compliance
      # run: |
        # pip install pydocstyle
        # pydocstyle --convention=numpy oboyo/

    # Test code and converage with pytest.
    - name: Run Unit Tests
      run: |
        # pytest comes with pytest-cov
        pip install pytest-cov
        pytest --verbose --cov=oboyo --cov-report term-missing test_oboyo/

    # Build Source Distribution.
    - name: Build source distribution
      run: python setup.py sdist bdist_wheel

    # Upload Source Distribution to GitHub Actions.
    - name: Upload dist
      uses: actions/upload-artifact@master
      with:
        name: source-dist
        path: dist

    # Build sphinx docs.
    - name: Build docs
      run: |
        pip install sphinx sphinx_rtd_theme
        cd docs
        make html
        touch build/html/.nojekyll

    # Upload sphinx docs to GitHub Actions.
    - name: Upload docs
      uses: actions/upload-artifact@master
      with:
        name: sphinx-docs
        path: docs/build/html

  # Continuous Delivery
  # This job will deploy the code.
  upload:
    name: Deployment

    # Needs the build step to pass.
    needs: build

    # On every push to GitHub.
    if: github.event_name == 'push'

    # The type of runner that the job will run on.
    #runs-on: ${{ matrix.os }}
    runs-on: [ubuntu-latest]

    # Configure across different platforms.
    #strategy:
    #  matrix:

        # Linux
        #os: [ubuntu-latest]

        # Python versions
        #python-version: [3.7]

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Using actions/checkout get code from repo.
    # Referencing actions/checkout repo. If in private repo, must reference action in private repo.
    # Syntax {owner}/{repo}@{ref}
    - name: GitHub Checks
      uses: actions/checkout@v2

    # Downloads files from GitHub Actions.
    #- name: Download dist
    #  uses: actions/download-artifact@master
    #  with:
    #    name: source-dist
    #    path: dist

    # Upload to PYPI.
    #- name: Publish package
    #  uses: pypa/gh-action-pypi-publish@master
    #  with:
    #    user: __token__
    #    password: ${{ secrets.pypi_password }}

    # Setup Anaconda and Python Version.
    # setuptools and wheel come with Anaconda.
    #- name: Set up Anaconda and Python ${{ matrix.python-version }}
    #  uses: goanpeca/setup-miniconda@v1
    #  with:
    #      auto-update-conda: true
    #      python-version: ${{ matrix.python-version }}

    # Install dependencies.
    #- name: Install dependencies
    #  run: |
    #    conda install anaconda-client

    # Upload to Anaconda Cloud. Need to add GitHub Secret.
    # - name: Upload to Anaconda
      # run: |
        # python setup.py sdist
        # anaconda upload --skip-existing dist/*.tar.gz

    #- name: publish-to-conda
    #  uses: fcakyon/conda-publish-action@v1.3
    #  with:
    #    subdir: 'dist'
    #    anacondatoken: ${{ secrets.ANACONDA_TOKEN }}
    #    platforms: 'win oxs linux'

    # Download sphinx docs from GitHub Actions.
    - name: Download docs
      uses: actions/download-artifact@master
      with:
        name: sphinx-docs
        path: docs/build/html

    # Deploy sphinx docs to GitHub.
    - name: Deploy to gh-pages
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{ secrets.GH_PAT }}
        BRANCH: gh-pages
        FOLDER: docs/build/html
